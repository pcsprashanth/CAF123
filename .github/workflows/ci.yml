name: 'Azure Foundation CI Workflow'

permissions:
  id-token: write
  contents: write
  issues: write
  pull-requests: write

on:
  workflow_call:
    inputs:
      runs-on:
        required: false
        type: string
        default: github-ubuntu-2cores
     iupipes-config-path:
        required: false
        type: string
        default: '.iupipes.yml'
      infra-working-directory:
        required: false
        type: string
        default: 'infra'
      infra-terraform-version:
        required: false
        type: string
        default: '1.1.9'
      environment:
        required: true
        type: string

  secrets:
    AZURE_CLIENT_ID:
      required: true
    AZURE_SUBSCRIPTION_ID:
      required: true
    AZURE_TENANT_ID:
      required: true

env:
 ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
 ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
 ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
 ARM_USE_OIDC: true

jobs:

  config-parse:
    name: Parser config file
    runs-on: ${{ inputs.runs-on }}
    outputs:
     infra-working-directory: ${{ steps.action-parse.outputs.infra-working-directory }}
     infra-terraform-version: ${{ steps.action-parse.outputs.infra-terraform-version }}

    steps:
      - name: Get Token
        id: get_workflow_token
        uses: peter-murray/workflow-application-token-action@v1
        with:
          application_id: ${{ secrets.APPLICATION_ID }}
          application_private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Checkout GitHub Action
        uses: actions/checkout@v2
        with:
          repository: itau-corp/itau-up2-action-config-parse
          ref: 'refs/heads/v1'
          path: .github/actions/itau-up2-action-config-parse
          token: ${{ steps.get_workflow_token.outputs.token }}

      - name: Config parser
        id: action-parse
        uses: ./.github/actions/itau-up2-action-config-parse
        with:
          configPath: ${{ inputs.iupipes-config-path }}
          reusableInputs: '${{ toJSON(inputs) }}'

  terraform-ci:
    name: 'Terraform CI'
    runs-on: ${{ inputs.runs-on }}
    environment: ${{ inputs.environment }}
    needs:
      - config-parse
    defaults:
      run:
        working-directory: ${{ needs.config-parse.outputs.infra-working-directory }
    env:
      #this is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
      tfplan: ${{ steps.tf-plan.outputs.summary }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: 'az login with oidc'
      uses: azure/login@v1
      with:
        # allow-no-subscriptions: true
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
    uses: hashicorp/setup-terraform@v2
    with:
      terraform_wrapper: false
      terraform_version: ${{ needs.config-parse.outputs.infra-terraform-version }}

    - name: Terraform Format
      run: terraform fmt -check

    - name: 'Init Terraform Backend'
      id: init-terraform-backend
      shell: bash
      run: |
        pushd ../scripts
          # Get Repository ID
          export REPO_ID=$(curl -s -H "Authorization:token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }} | jq '.id')

          # Create tf backend if not exists
          ./create-tf-backend-azure.sh
        popd

    # Generate backend.tf file
    - name: Generate TF Backend configs
      shell: bash
      run: |
        cat > backend.tf <<EOF
        terraform {
          backend "azurerm" {
            resource_group_name = "${{ steps.init-terraform-backend.outputs.RESOURCE_GROUP_NAME }}"
            storage_account_name = "${{ steps.init-terraform-backend.outputs.STORAGE_ACCOUNT_NAME }}"
            container_name    = "${{ steps.init-terraform-backend.outputs.CONTAINER_NAME }}"
            key         = "terraform.tfstate"
          }
        }
        EOF

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else
          exit 0
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: tfplan

  # TO-DO:
  # terrascan policy-as-code